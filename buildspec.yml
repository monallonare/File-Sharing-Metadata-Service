version: 0.2

env:
  variables:
    ECR_REPO_URI: "306266123975.dkr.ecr.ap-south-1.amazonaws.com/newmetadata"
    FRONTEND_BUCKET: "yourfrontendbucketfilesharingmetadataservice"
    LAMBDA_FUNCTION_NAME: "uploadmetadat"
    ECS_CONTAINER_NAME: "fileshare"
    DB_HOST: "metadatadb.claw0qi2ez2e.ap-south-1.rds.amazonaws.com"
    DB_NAME: "metadatadb"
    DB_PORT: "3306"
    SECRET_NAME: "metadata/"

phases:
  install:
    runtime-versions:
      nodejs: 14
    commands:
      - echo "🧼 Cleaning and updating system packages..."
      - yum clean all
      - yum update -y
      - echo "📦 Installing jq and MySQL client..."
      - yum install -y mysql jq

  pre_build:
    commands:
      - echo "🔐 Retrieving DB credentials from Secrets Manager..."
      - export DB_USER=$(aws secretsmanager get-secret-value --secret-id my-db-secret --query SecretString --output text | jq -r '.username')
      - export DB_PASS=$(aws secretsmanager get-secret-value --secret-id my-db-secret --query SecretString --output text | jq -r '.password')
      - echo "🔑 Logging into Amazon ECR..."
      - export IMAGE_TAG="${CODEBUILD_RESOLVED_SOURCE_VERSION}"
      - aws ecr get-login-password | docker login --username AWS --password-stdin "${ECR_REPO_URI%%/*}"

  build:
    commands:
      - echo "🐳 Building Docker image..."
      - docker build -t "$ECR_REPO_URI:$IMAGE_TAG" ./backend
      - docker push "$ECR_REPO_URI:$IMAGE_TAG"
      - echo "🌐 Syncing frontend files to S3..."
      - aws s3 sync ./frontend "s3://$FRONTEND_BUCKET" --delete

  post_build:
    commands:
      - cd lambda/generatePresigned
      - npm install || pip install -r requirements.txt
      - zip -r ../../generatePresigned.zip *
      - cd ../../
      - echo "🚀 Updating Lambda function..."
      - aws lambda update-function-code --function-name "$LAMBDA_FUNCTION_NAME" --zip-file fileb://generatePresigned.zip
      - echo "📝 Creating imagedefinitions.json for ECS..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECS_CONTAINER_NAME" "$ECR_REPO_URI:$IMAGE_TAG" > pipeline/imagedefinitions.json
      - echo "🔧 Checking if schema.sql exists..."
      - ls -l ./sql/schema.sql || { echo "❌ schema.sql not found"; exit 1; }
      - echo "📥 Pushing schema.sql file (no validation)..."
      # Add any command here if needed to push schema.sql somewhere or just keep it as is

artifacts:
  files:
    - pipeline/imagedefinitions.json
