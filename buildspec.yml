version: 0.2

env:
  variables:
    ECR_REPO_URI: "306266123975.dkr.ecr.ap-south-1.amazonaws.com/metadata/backend"
    FRONTEND_BUCKET: "yourfrontendbucketfilesharingmetadataservice"
    LAMBDA_FUNCTION_NAME: "uploadmetadat"
    ECS_CONTAINER_NAME: "fileshare"
    DB_HOST: "metadatadb.claw0qi2ez2e.ap-south-1.rds.amazonaws.com"
    DB_NAME: "metadatadb"
    DB_PORT: "3306"
    SECRET_NAME: "metadata/"

phases:
  install:
    runtime-versions:
      nodejs: 14
    commands:
      - echo "Cleaning yum metadata and updating..."
      - yum clean all
      - yum update -y
      
      - echo "Installing jq and MySQL client repo (Amazon Linux 2)..."
      - yum install -y amazon-linux-extras
      - amazon-linux-extras enable mysql8.0
      - yum clean metadata
      - yum install -y mysql jq

  pre_build:
    commands:
      - echo "Retrieving DB credentials from Secrets Manager..."
      - export DB_USER=$(aws secretsmanager get-secret-value --secret-id my-db-secret --query SecretString --output text | jq -r '.username')
      - export DB_PASS=$(aws secretsmanager get-secret-value --secret-id my-db-secret --query SecretString --output text | jq -r '.password')
      - |
        IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
        IMAGE_PREFIX=${ECR_REPO_URI%%/*}
        aws ecr get-login-password | docker login --username AWS --password-stdin $IMAGE_PREFIX

  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $ECR_REPO_URI:$IMAGE_TAG ./backend
      - docker push $ECR_REPO_URI:$IMAGE_TAG
      - echo "Syncing frontend files to S3..."
      - aws s3 sync ./frontend s3://$FRONTEND_BUCKET --delete

  post_build:
    commands:
      - echo "Installing Lambda dependencies..."
      - cd lambda/generatePresigned
      - npm install || pip install -r requirements.txt
      - zip -r ../../generatePresigned.zip *
      - cd ../../
      
      - echo "Updating Lambda function..."
      - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://generatePresigned.zip
      
      - echo "Creating imagedefinitions.json for ECS..."
      - printf '[{"name":"%s","imageUri":"%s"}]' "$ECS_CONTAINER_NAME" "$ECR_REPO_URI:$IMAGE_TAG" > pipeline/imagedefinitions.json
      
      - echo "Checking if schema.sql file is present..."
      - ls -l ./sql/schema.sql || echo "Warning: schema.sql not found, skipping DB schema load."
      
      # Uncomment below if you want to test MySQL connectivity and run schema.sql
      # - echo "Testing MySQL connectivity..."
      # - mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p"$DB_PASS" -e "SHOW DATABASES;" || echo "Warning: Cannot connect to MySQL, skipping schema load."
      
      # - if [ -f ./sql/schema.sql ]; then
      #     mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p"$DB_PASS" $DB_NAME < ./sql/schema.sql || echo "Warning: Failed to run schema.sql";
      #   else
      #     echo "No schema.sql found, skipping.";
      #   fi

artifacts:
  files:
    - pipeline/imagedefinitions.json
